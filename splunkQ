#!/usr/local/bin/python3.7

from argparse import RawTextHelpFormatter
description = '''
\n
        This script will help you query all different splunk servers to fetch what you need. \n

        Type -h or --help for a full list of available options. \n

        Alex Lu 03/18/2020 version 1.0 \n
        Alex Lu 03/31/2020 version 1.1 \n
        Alex Lu 04/20/2020 version 1.2 \n
        Alex Lu 04/28/2020 version 1.3 \n

        Server has four options: \n
        Please edit the code to add your splunk server api urls. \n
        default   => https://splunk.ABC.com      \n
        1       => https://splunk1.ABC.com  \n
        2        => https://splunk2.ABC.com   \n
        3        => https://splunk3.ABC.com   \n

        -e-5m@m -l now\n
        this will add “earliest=-5m@m latest=now” into your query command if your \n
        original command doesn’t include the timeframe.\n
        Please note: if you give value start with “-“ or "+"  please leave no space with option “-e” or “-l”\n

        -e 04/28/2020:23:00:00 -l 04/28/2020:23:00:01\n
        This will add “earliest=04/28/2020:23:00:00 latest=04/28/2020:23:00:01” into your query command\n
 
\n
'''
import requests
import re
import xml.etree.ElementTree as ET
import argparse
import getpass
from termcolor import colored

# Disable https certificate errors
requests.packages.urllib3.disable_warnings()


def splunkQ(user, password, baseurl, searchquery):
    s = requests.session()
    username = user
    password = password
    baseurl = baseurl
    searchquery = searchquery
    sessionkey = None
    sid = None
    searchresults = None
    data = {'username': username, 'password': password}
    response = s.post(baseurl+'/services/auth/login', data=data, verify=False)
    root = ET.fromstring(response.content)
    sessionkey = root.findtext('sessionKey')
    #print(sessionkey)
    if not searchquery.startswith('search'):
        searchquery = 'search ' + searchquery
    headers = {'Authorization': 'Splunk %s' % sessionkey}
    data = {'search': searchquery}
    response = s.post(baseurl+'/services/search/jobs', headers=headers,data=data,verify=False)
    root = ET.fromstring(response.content)
    sid = root.findtext('sid')
    #print(sid)
    servicessearchstatusstr = '/services/search/jobs/%s/' % sid
    #print(servicessearchstatusstr)
    isDone = False
    while (not isDone):
        searchstatus = requests.get(baseurl + servicessearchstatusstr, auth=(username, password), verify=False)
        #print(searchstatus)
        isDoneStatus = re.compile(b'isDone">(0|1)')
        isDoneStatus = isDoneStatus.search(searchstatus.content).groups()[0]
        #print(isDoneStatus)
        if (isDoneStatus == b'1'):
            isDone = True
    services_search_results_str = '/services/search/jobs/%s/results?output_mode=csv&count=0' % sid
    results = requests.get(baseurl + services_search_results_str, auth=(username, password), verify=False)
    if not results.content:
        print(colored("> > > > > > > > > > > > > > >    Splunk query result is empty!", 'red', attrs=['bold']))
        exit()
    else:
        #print(results.content)
        searchresults = results.text.split('\n',1)[1]
        #print(searchresults)
        return searchresults


parser = argparse.ArgumentParser(
    description=description, formatter_class=RawTextHelpFormatter)
parser.add_argument('-u', '--user', action="store", dest="user", required=False, default='YOUR_SERVICE_ACCOUNT',
                    help="Username to run the script against.  This must be a valid username")
parser.add_argument('-s', '--server', action="store", dest="server",
                    required=False, default='api', help="Specify a Splunk Server to query")
parser.add_argument('-q', '--querycommand', action="store", dest="queryCmd",
                    required=True, default='none', help="Specify a query command to use")
parser.add_argument('-e', '--earliest', action="store", dest="earliest",
                    required=False, default='none', help="Specify earliest start.")
parser.add_argument('-l', '--latest', action="store", dest="latest",
                    required=False, default='none', help="Specify latest")

args = parser.parse_args()

#specify splunk server to use
if args.server == 'api':
    baseurl = "https://splunk-api.ABC.com:8089"
elif args.server == '2':
    baseurl = "https://splunk2-api.ABC.com:8089"
elif args.server == '3':
    baseurl = "https://splunk3-api.ABC.com:8089"
elif args.server == '4':
    baseurl = "https://splunk4-api.ABC.com:8089"
else:
    print("The server you are trying to use doesn't exist, please try again!")
    exit()

#determin either service account(default) or specific accout to use
if args.user != 'YOUR_SERVICE_ACCOUNT':
    username = args.user
    password = getpass.getpass()
else:
    username = "YOUR_SERVICE_ACCOUNT"
    password = "YOUR_SERVICE_ACCOUNT_PASSWORD"

if args.earliest and args.latest:
    searchquery = "earliest=" + args.earliest + " latest=" + args.latest + " " + args.queryCmd
else:
    searchquery = args.queryCmd

mySearch = splunkQ(username,password,baseurl,searchquery)
print(colored(mySearch, 'yellow'))
